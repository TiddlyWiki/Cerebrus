/**
 * @typedef {Object} ValidationRule
 * @property {string} name - A human-readable name for the rule.
 * @property {(baseRef: string, changedFiles: string[]) => boolean} condition - 
 *   Returns `true` if the rule is triggered based on the base branch and changed files.
 * @property {string} commentTag - Unique identifier in the comment body.
 * @property {string} message - The comment body to post when the rule is triggered.
 * @property {boolean} [stopProcessing=false] - Optional: halt further rule evaluation.
 */


const rules = [
	{
		name: "tiddlywiki-com: enforce editions only",
		id: 1,
		condition: function(baseRef, changedFiles){
			if(baseRef === 'tiddlywiki-com') {
				const allInEditions = changedFiles.every(file => file.startsWith('editions/'));
				const CLAOnly = changedFiles.length === 1 && changedFiles[0].startsWith("licenses/")
				if(!allInEditions && !CLAOnly) {
					return true
				}
			}
			return false;
		},
		commentTag: "<!-- editions-folder-error -->",
		get message() {
			return `${this.commentTag}
❌ **Error**: PRs targeting the \`tiddlywiki-com\` branch must not contain any files outside the \`/editions\` folder.`
		}
	},
	{
		name: "master: check docs only",
		id: 2,
		condition: function(baseRef, changedFiles){
			if(baseRef === 'master') {
				const allInEditions = changedFiles.every(file => file.startsWith('editions/'));
				if(allInEditions) {
					return true
				}
			}
			return false;
		},
		commentTag: "<!-- editions-folder-warning -->",
		get message() {
			return `${this.commentTag}
⚠️ **Warning**: This PR only modifies documentation (within \`/editions\`). If the changes do not relate to the prerelease, please consider targeting the \`tiddlywiki-com\` branch instead.`
		}
	},
	{
		name: "CLA: ensure CLA signature PRs do not include other files and target tiddlywiki-com",
		id: 3,
		condition: function(baseRef, changedFiles){
		  // Check if there's at least one file in the `licenses/` folder
		  const hasLicenseFile = changedFiles.some(file => file.startsWith('licenses/'));
		  
		  // If the PR has more than one file and contains a file in `licenses/`, trigger the rule
		  if ((hasLicenseFile && changedFiles.length > 1) || (hasLicenseFile && baseRef !== "tiddlywiki-com") ) {
			return true;
		  }
	
		  return false;
		},
		commentTag: "<!-- cla-error -->",
		get message() {
		  return `${this.commentTag}
❌ **Error**: PRs signing the license must target the \`tiddlywiki-com\` branch and must not contain any other files.`
		}
	  },
	  {
		name: "auto-generated files check",
		id: 4,
		condition: function(baseRef, changedFiles){
		  // Files that should trigger the rule
		  const triggerFiles = ['/readme.md', '/bin/readme.md', 'contributing.md', 'license'];
	
		  // Check if any of the trigger files are present in the PR
		  const containsAutoGeneratedFile = changedFiles.some(file => triggerFiles.includes(file));
	
		  return containsAutoGeneratedFile;
		},
		commentTag: "<!-- auto-generated-files-error -->",
		get message() {
		  return `${this.commentTag}
❌ **Error**: Your PR contains one or more of the following files which are auto-generated: /readme.md, /bin/readme.md, contributing.md, license.`
		}
	  }
];

export default rules;
